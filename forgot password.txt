package PET_ADOPTION;

import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.awt.event.ActionEvent;
import java.awt.Color;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.ImageIcon;

public class forgetpassword extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JTextField user1;
    private JLabel confirmpass;
    private JPasswordField ps1;
    private JLabel lblNewLabel;
    private JPasswordField ps2;
    private JLabel lblNewLabel_1;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    forgetpassword frame = new forgetpassword();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public forgetpassword() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(0, 0, 1750, 870);
        contentPane = new JPanel();
        contentPane.setBackground(Color.PINK);
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        JLabel usern = new JLabel("username :");
        usern.setFont(new Font("Tahoma", Font.BOLD, 25));
        usern.setBounds(281, 122, 160, 66);
        contentPane.add(usern);

        JLabel newpass1 = new JLabel("password :");
        newpass1.setFont(new Font("Tahoma", Font.BOLD, 25));
        newpass1.setBounds(281, 266, 160, 53);
        contentPane.add(newpass1);

        confirmpass = new JLabel("confirm password :");
        confirmpass.setFont(new Font("Tahoma", Font.BOLD, 25));
        confirmpass.setBounds(177, 387, 264, 66);
        contentPane.add(confirmpass);

        user1 = new JTextField();
        user1.setBounds(472, 122, 285, 55);
        contentPane.add(user1);
        user1.setColumns(10);

        JButton btnNewButton = new JButton("Re-set");
        btnNewButton.setFont(new Font("Tahoma", Font.BOLD, 25));
        btnNewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    String us1 = user1.getText();
                    String np = new String(ps1.getPassword());
                    String cp = new String(ps2.getPassword());

                    if (!np.equals(cp) || !isValidPassword(np)) {
                        String errorMessage = "";
                        if (!np.equals(cp)) {
                            errorMessage += "Invalid Password. Password does not match.\n";
                        }
                        if (!isValidPassword(np)) {
                            errorMessage += "Invalid Password. Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character.\n";
                        }
                        JOptionPane.showMessageDialog(null, errorMessage, "Invalid Input", JOptionPane.ERROR_MESSAGE);
                        return; // Stop further execution
                    }

                    Class.forName("com.mysql.cj.jdbc.Driver");
                    Connection con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/pet_adoption_portal", "root", "mnbvcxY@0");
                    Statement st1 = con1.createStatement();
                    String sql1 = "SELECT * FROM access WHERE username = '" + us1 + "'";
                    ResultSet res1 = st1.executeQuery(sql1);

                    if (res1.next()) {
                        String sql2 = "UPDATE access SET password = ? WHERE username = ?";
                        PreparedStatement pts = con1.prepareStatement(sql2);
                        pts.setString(1, np);
                        pts.setString(2, us1);
                        pts.executeUpdate();
                        JOptionPane.showMessageDialog(btnNewButton, "Data updated", "Updated", JOptionPane.INFORMATION_MESSAGE);
                        loginPage newframe = new loginPage();
                        newframe.setVisible(true);
                        SwingUtilities.windowForComponent(btnNewButton).dispose();
                    } else {
                        JOptionPane.showMessageDialog(btnNewButton, "Username not found", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(btnNewButton, "Error while establishing connection", "Connection Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        btnNewButton.setBounds(487, 546, 160, 66);
        contentPane.add(btnNewButton);

        ps1 = new JPasswordField();
        ps1.setBounds(472, 266, 285, 50);
        contentPane.add(ps1);

        lblNewLabel = new JLabel("*Password must contain uppercase, lowercases, and number");
        lblNewLabel.setFont(new Font("Segoe UI", Font.PLAIN, 15));
        lblNewLabel.setBounds(454, 453, 469, 35);
        contentPane.add(lblNewLabel);

        JButton btnNewButton_1 = new JButton("BACK");
        btnNewButton_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					new loginPage().setVisible(true);
					SwingUtilities.windowForComponent(btnNewButton_1).dispose();
				}
				catch(Exception o) {
					JOptionPane.showMessageDialog(btnNewButton_1,this,"Error while establishing connection failed",0);
				}
        	}
        });
        btnNewButton_1.setBackground(new Color(255, 250, 205));
        btnNewButton_1.setFont(new Font("Tahoma", Font.PLAIN, 20));
        btnNewButton_1.setBounds(1140, 39, 89, 23);
        contentPane.add(btnNewButton_1);

        ps2 = new JPasswordField();
        ps2.setBounds(472, 387, 289, 55);
        contentPane.add(ps2);

        JRadioButton rdbtnShowPass1 = new JRadioButton("show");
        rdbtnShowPass1.setFont(new Font("Tahoma", Font.PLAIN, 15));
        rdbtnShowPass1.setBounds(801, 285, 111, 23);
        contentPane.add(rdbtnShowPass1);

        JRadioButton rdbtnShowPass2 = new JRadioButton("show");
        rdbtnShowPass2.setFont(new Font("Tahoma", Font.PLAIN, 15));
        rdbtnShowPass2.setBounds(801, 401, 111, 23);
        contentPane.add(rdbtnShowPass2);
        
        lblNewLabel_1 = new JLabel("");
        lblNewLabel_1.setIcon(new ImageIcon("C:\\Users\\Owner\\Downloads\\pawel-czerwinski-qztBRIrU1FM-unsplash.jpg"));
        lblNewLabel_1.setBounds(0, 0, 1750, 870);
        contentPane.add(lblNewLabel_1);

        // Toggle password visibility
        rdbtnShowPass1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (rdbtnShowPass1.isSelected()) {
                    ps1.setEchoChar((char) 0);
                } else {
                    ps1.setEchoChar('*');
                }
            }
        });

        rdbtnShowPass2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (rdbtnShowPass2.isSelected()) {
                    ps2.setEchoChar((char) 0);
                } else {
                    ps2.setEchoChar('*');
                }
            }
        });
    }

    /**
     * Method to validate password criteria.
     */
    public static boolean isValidPassword(String password) {
        if (password.length() < 8) {
            return false;
        }
        boolean hasUppercase = false;
        boolean hasLowercase = false;
        boolean hasDigit = false;
        boolean hasSpecialChar = false;
        for (char c : password.toCharArray()) {
            if (Character.isUpperCase(c)) {
                hasUppercase = true;
            } else if (Character.isLowerCase(c)) {
                hasLowercase = true;
            } else if (Character.isDigit(c)) {
                hasDigit = true;
            } else if (!Character.isLetterOrDigit(c)) {
                hasSpecialChar = true;
            }
        }
        return hasUppercase && hasLowercase && hasDigit && hasSpecialChar;
    }
}
